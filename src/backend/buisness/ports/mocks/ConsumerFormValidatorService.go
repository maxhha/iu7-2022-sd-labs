// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ConsumerFormValidatorService is an autogenerated mock type for the ConsumerFormValidatorService type
type ConsumerFormValidatorService struct {
	mock.Mock
}

// FormSchema provides a mock function with given fields:
func (_m *ConsumerFormValidatorService) FormSchema() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Validate provides a mock function with given fields: form
func (_m *ConsumerFormValidatorService) Validate(form map[string]interface{}) error {
	ret := _m.Called(form)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConsumerFormValidatorService creates a new instance of ConsumerFormValidatorService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumerFormValidatorService(t testing.TB) *ConsumerFormValidatorService {
	mock := &ConsumerFormValidatorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
