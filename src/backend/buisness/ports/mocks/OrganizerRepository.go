// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	entities "iu7-2022-sd-labs/buisness/entities"

	mock "github.com/stretchr/testify/mock"

	repositories "iu7-2022-sd-labs/buisness/ports/repositories"

	testing "testing"
)

// OrganizerRepository is an autogenerated mock type for the OrganizerRepository type
type OrganizerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: organizer
func (_m *OrganizerRepository) Create(organizer *entities.Organizer) error {
	ret := _m.Called(organizer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Organizer) error); ok {
		r0 = rf(organizer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: params
func (_m *OrganizerRepository) Find(params *repositories.OrganizerFindParams) ([]entities.Organizer, error) {
	ret := _m.Called(params)

	var r0 []entities.Organizer
	if rf, ok := ret.Get(0).(func(*repositories.OrganizerFindParams) []entities.Organizer); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Organizer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repositories.OrganizerFindParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *OrganizerRepository) Get(id string) (entities.Organizer, error) {
	ret := _m.Called(id)

	var r0 entities.Organizer
	if rf, ok := ret.Get(0).(func(string) entities.Organizer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Organizer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: organizer
func (_m *OrganizerRepository) Update(organizer *entities.Organizer) error {
	ret := _m.Called(organizer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Organizer) error); ok {
		r0 = rf(organizer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrganizerRepository creates a new instance of OrganizerRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrganizerRepository(t testing.TB) *OrganizerRepository {
	mock := &OrganizerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
