// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	entities "iu7-2022-sd-labs/buisness/entities"

	mock "github.com/stretchr/testify/mock"

	repositories "iu7-2022-sd-labs/buisness/ports/repositories"

	testing "testing"
)

// BlockListRepository is an autogenerated mock type for the BlockListRepository type
type BlockListRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: params
func (_m *BlockListRepository) Find(params *repositories.BlockListFindParams) ([]entities.BlockList, error) {
	ret := _m.Called(params)

	var r0 []entities.BlockList
	if rf, ok := ret.Get(0).(func(*repositories.BlockListFindParams) []entities.BlockList); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.BlockList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repositories.BlockListFindParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrCreateByOrganizer provides a mock function with given fields: organizerID, updateFn
func (_m *BlockListRepository) UpdateOrCreateByOrganizer(organizerID string, updateFn func(*entities.BlockList) error) (entities.BlockList, error) {
	ret := _m.Called(organizerID, updateFn)

	var r0 entities.BlockList
	if rf, ok := ret.Get(0).(func(string, func(*entities.BlockList) error) entities.BlockList); ok {
		r0 = rf(organizerID, updateFn)
	} else {
		r0 = ret.Get(0).(entities.BlockList)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, func(*entities.BlockList) error) error); ok {
		r1 = rf(organizerID, updateFn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlockListRepository creates a new instance of BlockListRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlockListRepository(t testing.TB) *BlockListRepository {
	mock := &BlockListRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
