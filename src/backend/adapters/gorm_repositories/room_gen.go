// This file was generated by codegen/gorm_repository. DO NOT EDIT.
package gorm_repositories

import (
	"iu7-2022-sd-labs/buisness/ports/repositories"

	"fmt"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"iu7-2022-sd-labs/buisness/entities"
)

type RoomRepository struct{ db *gorm.DB }

func (r *GORMRepository) Room() repositories.RoomRepository {
	return &RoomRepository{r.db}
}

func (r *RoomRepository) orderQuery(query *gorm.DB, order *repositories.RoomOrder) (*gorm.DB, error) {
	if order == nil {
		return query, nil
	}

	column, exists := roomFieldToColumn[order.By]
	if !exists {
		return nil, fmt.Errorf("column for field \"%s\" is unknown", order.By)
	}

	query = query.Order(clause.OrderByColumn{
		Column: clause.Column{Name: column},
		Desc:   order.Desc,
	})

	return query, nil
}

func (r *RoomRepository) sliceQuery(query *gorm.DB, order *repositories.RoomOrder, slice *repositories.ForwardSlice) (*gorm.DB, error) {
	if slice == nil {
		return query, nil
	}

	column, exists := roomFieldToColumn[order.By]
	if !exists {
		return nil, fmt.Errorf("column for field \"%s\" is unknown", order.By)
	}

	var err error
	query, err = sliceQuery(query, column, order.Desc, slice)
	return query, Wrap(err, "sliceQuery")
}

func (r *RoomRepository) Delete(id string) (entities.Room, error) {
	obj := Room{}
	ent := entities.NewRoom()

	err := r.db.Transaction(func(tx *gorm.DB) error {
		err := r.db.Clauses(clause.Locking{
			Strength: "UPDATE",
			Table:    clause.Table{Name: clause.CurrentTable},
		}).
			Take(&obj, "id = ?", id).
			Error

		if err != nil {
			return Wrap(err, "db select for update")
		}

		if err := r.db.Delete(&obj).Error; err != nil {
			return Wrap(err, "db delete")
		}

		return nil
	})

	if err != nil {
		return ent, Wrap(err, "db transaction")
	}

	obj.Into(&ent)
	return ent, nil
}
